-- VHDL Entity pre_made.ILA_half_adder.symbol
--
-- Created:
--          by - bdgitr.UNKNOWN (HTC219-711-SPC)
--          at - 13:20:03 16.02.2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY ILA_half_adder IS
   PORT( 
      clk        : IN     std_logic;
      rst_n      : IN     std_logic;
      sw0        : IN     std_logic;
      sw1        : IN     std_logic;
      carry      : OUT    std_logic;
      sum        : OUT    std_logic;
      triggerbit : OUT    std_logic
   );

-- Declarations

END ILA_half_adder ;

--
-- VHDL Architecture pre_made.ILA_half_adder.struct
--
-- Created:
--          by - bdgitr.UNKNOWN (HTC219-711-SPC)
--          at - 13:20:03 16.02.2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;
LIBRARY pre_made;

ARCHITECTURE struct OF ILA_half_adder IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL carry_from_duv : std_logic;
   SIGNAL rst            : std_logic;
   SIGNAL sum_from_duv   : std_logic;


   -- ModuleWare signal declarations(v1.12) for instance 'carry_dff' of 'adff'
   SIGNAL mw_carry_dffreg_cval : std_logic;

   -- ModuleWare signal declarations(v1.12) for instance 'sum_dff' of 'adff'
   SIGNAL mw_sum_dffreg_cval : std_logic;

   -- Component Declarations
   COMPONENT c1_t1_half_adder
   PORT (
      sw0   : IN     std_logic ;
      sw1   : IN     std_logic ;
      carry : OUT    std_logic ;
      sum   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT trigger_counter
   PORT (
      clk        : IN     std_logic;
      rst_n      : IN     std_logic;
      triggerbit : OUT    std_logic
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : c1_t1_half_adder USE ENTITY alien_game_lib.c1_t1_half_adder;
   FOR ALL : trigger_counter USE ENTITY pre_made.trigger_counter;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'carry_dff' of 'adff'
   carry <= mw_carry_dffreg_cval;
   carry_dffseq_proc: PROCESS (clk, rst)
   BEGIN
      IF (rst = '0') THEN
         mw_carry_dffreg_cval <= '0';
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_carry_dffreg_cval <= carry_from_duv;
      END IF;
   END PROCESS carry_dffseq_proc;

   -- ModuleWare code(v1.12) for instance 'sum_dff' of 'adff'
   sum <= mw_sum_dffreg_cval;
   sum_dffseq_proc: PROCESS (clk, rst)
   BEGIN
      IF (rst = '0') THEN
         mw_sum_dffreg_cval <= '0';
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_sum_dffreg_cval <= sum_from_duv;
      END IF;
   END PROCESS sum_dffseq_proc;

   -- ModuleWare code(v1.12) for instance 'U_1' of 'inv'
   rst <= NOT(rst_n);

   -- Instance port mappings.
   U_2 : c1_t1_half_adder
      PORT MAP (
         sw0   => sw0,
         sw1   => sw1,
         carry => carry_from_duv,
         sum   => sum_from_duv
      );
   U_0 : trigger_counter
      PORT MAP (
         clk        => clk,
         rst_n      => rst,
         triggerbit => triggerbit
      );

END struct;
