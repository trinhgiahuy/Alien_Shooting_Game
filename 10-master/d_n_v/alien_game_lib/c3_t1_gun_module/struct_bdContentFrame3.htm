<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 15:42:25 on 05/31/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c3_t1_gun_module.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - ACER.UNKNOWN (LAPTOP-PGKK1HS3)</span>
<span class=C>--          at - 01:18:20 05&#47;31&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c3_t1_gun_module <span class=K>IS</span>
   <span class=K>PORT</span>(
      btn        : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk        : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      gun_px_idx : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      rst_n      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      gun_col    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      x_internal : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c3_t1_gun_module ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c3_t1_gun_module.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - ACER.UNKNOWN (LAPTOP-PGKK1HS3)</span>
<span class=C>--          at - 01:18:20 05&#47;31&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c3_t1_gun_module <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> c_out    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> c_out1   : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> c_out2   : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> c_out3   : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> data_out : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout     : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout0    : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout1    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout10   : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout12   : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout13   : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout14   : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout2    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout3    : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout4    : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout5    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout6    : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout7    : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout8    : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout9    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Implicit buffer signal declarations</span>
   <span class=K>SIGNAL</span> x_internal_internal : <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_0' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_0reg_cval : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0) := <span class=S>"000000000000000000000000"</span>;

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_2' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_2reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0) := <span class=S>"00000000"</span>;

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_22' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_22reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0) := <span class=S>"00000000"</span>;

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_23' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_23reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0) := <span class=S>"00000000"</span>;

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_21' of 'split'</span>
   <span class=K>SIGNAL</span> mw_U_21temp_din : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c2_t3_left_shifter
   <span class=K>PORT</span> (
      data_in  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      data_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c2_t4_right_shifter
   <span class=K>PORT</span> (
      c_in  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      c_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t3_left_shifter <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t3_left_shifter;
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t4_right_shifter <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t4_right_shifter;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_0' of 'adff'</span>
   gun_col <= mw_U_0reg_cval;
   u_0seq_proc: <span class=K>PROCESS</span> (clk)<span class=K>BEGIN</span>
      <span class=K>IF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
            mw_U_0reg_cval <= <span class=S>"110111110001011010000000"</span>;
         <span class=K>ELSE</span>
            mw_U_0reg_cval <= dout;
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_0seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_2' of 'adff'</span>
   y_coord <= mw_U_2reg_cval;
   u_2seq_proc: <span class=K>PROCESS</span> (clk)<span class=K>BEGIN</span>
      <span class=K>IF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
            mw_U_2reg_cval <= <span class=S>"10000000"</span>;
         <span class=K>ELSE</span>
            mw_U_2reg_cval <= dout9;
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_2seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_22' of 'adff'</span>
   x_internal_internal <= mw_U_22reg_cval;
   u_22seq_proc: <span class=K>PROCESS</span> (clk)<span class=K>BEGIN</span>
      <span class=K>IF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
            mw_U_22reg_cval <= <span class=S>"00010000"</span>;
         <span class=K>ELSE</span>
            mw_U_22reg_cval <= dout14;
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_22seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_23' of 'adff'</span>
   x_coord <= mw_U_23reg_cval;
   u_23seq_proc: <span class=K>PROCESS</span> (clk)<span class=K>BEGIN</span>
      <span class=K>IF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
            mw_U_23reg_cval <= <span class=S>"00010000"</span>;
         <span class=K>ELSE</span>
            mw_U_23reg_cval <= dout2;
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_23seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'and'</span>
   dout7 <= dout6 <span class=K>AND</span> enable;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_8' of 'and'</span>
   dout3 <= dout4 <span class=K>AND</span> btn(3);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_15' of 'and'</span>
   dout8 <= dout0 <span class=K>AND</span> dout13;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'constval'</span>
   dout <= <span class=S>"110111110001011010000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_3' of 'constval'</span>
   dout1 <= <span class=S>"10000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_7' of 'inv'</span>
   dout4 <= <span class=K>NOT</span>(btn(1));

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'mux'</span>
   u_4combo_proc: <span class=K>PROCESS</span>(dout10, c_out3, dout12)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout12 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout2 <= dout10;
      <span class=K>WHEN</span> '1' => dout2 <= c_out3;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout2 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_4combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'mux'</span>
   u_6combo_proc: <span class=K>PROCESS</span>(data_out, c_out, dout3)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout3 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout5 <= data_out;
      <span class=K>WHEN</span> '1' => dout5 <= c_out;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout5 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_6combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_12' of 'mux'</span>
   u_12combo_proc: <span class=K>PROCESS</span>(x_internal_internal, dout5, dout7)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout7 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout14 <= x_internal_internal;
      <span class=K>WHEN</span> '1' => dout14 <= dout5;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout14 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_12combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_14' of 'mux'</span>
   u_14combo_proc: <span class=K>PROCESS</span>(dout1, c_out1, dout8)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout8 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout9 <= dout1;
      <span class=K>WHEN</span> '1' => dout9 <= c_out1;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout9 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_14combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_16' of 'mux'</span>
   u_16combo_proc: <span class=K>PROCESS</span>(x_internal_internal, c_out2, dout13)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout13 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout10 <= x_internal_internal;
      <span class=K>WHEN</span> '1' => dout10 <= c_out2;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout10 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_16combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_11' of 'or'</span>
   dout6 <= btn(1) <span class=K>OR</span> btn(3);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_20' of 'or'</span>
   dout12 <= dout13 <span class=K>OR</span> dout0;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_21' of 'split'</span>
   mw_U_21temp_din <= gun_px_idx;
   u_21combo_proc: <span class=K>PROCESS</span> (mw_U_21temp_din)
   <span class=K>VARIABLE</span> temp_din: <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>BEGIN</span>
      temp_din := mw_U_21temp_din(1 <span class=K>DOWNTO</span> 0);
      dout0 <= temp_din(0);
      dout13 <= temp_din(1);
   <span class=K>END</span> <span class=K>PROCESS</span> u_21combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_10 : c2_t3_left_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         data_in  => x_internal_internal,
         data_out => data_out
      );
   U_9 : c2_t4_right_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         c_in  => x_internal_internal,
         c_out => c_out
      );
   U_13 : c2_t4_right_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         c_in  => dout1,
         c_out => c_out1
      );
   U_18 : c2_t4_right_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         c_in  => x_internal_internal,
         c_out => c_out2
      );
   U_19 : c2_t4_right_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         c_in  => dout10,
         c_out => c_out3
      );

   <span class=C>-- Implicit buffered output assignments</span>
   x_internal <= x_internal_internal;

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
