<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 15:42:47 on 05/31/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c5_t4_game_logic_top_level.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - ACER.UNKNOWN (LAPTOP-PGKK1HS3)</span>
<span class=C>--          at - 01:22:45 05&#47;31&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c5_t4_game_logic_top_level <span class=K>IS</span>
   <span class=K>PORT</span>(
      btn           : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk           : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      sw0           : <span class=A>IN</span>     <span class=T>std_logic</span>;
      w_rdy         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      color         : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      frame_written : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      write_out     : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      xw            : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      yw            : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c5_t4_game_logic_top_level ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c5_t4_game_logic_top_level.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - ACER.UNKNOWN (LAPTOP-PGKK1HS3)</span>
<span class=C>--          at - 01:22:45 05&#47;31&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c5_t4_game_logic_top_level <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> alien_col      : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> bullet_color   : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> bullet_x_coord : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> bullet_y_coord : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> color1         : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> enable         : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> enable_slow    : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> gun_col        : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> gun_px_indx    : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> hit            : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> module_select  : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> speed          : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> victory        : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> victory1       : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> x_coord        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> x_coord1       : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> x_coord2       : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> x_internal     : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord1       : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord2       : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c2_t7_basic_alien_top
   <span class=K>PORT</span> (
      clk         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable_slow : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      speed       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      alien_col   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c3_t1_gun_module
   <span class=K>PORT</span> (
      btn        : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_px_idx : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      rst_n      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_col    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      x_internal : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c3_t2_write_sequencer
   <span class=K>PORT</span> (
      alien_defeat      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      alien_defeat_done : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk               : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst               : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      write_ready       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable            : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      enable_slow       : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      frame_done        : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      gun_px_indx       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      module_select     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      write             : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c3_t4_gun_bullet
   <span class=K>PORT</span> (
      btn            : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_x_coord    : <span class=A>IN</span>     <span class=T>std_logic_vector</span> ( 7 <span class=K>DOWNTO</span> 0);
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      bullet_color   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      bullet_x_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      bullet_y_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c4_t1_hit_detector
   <span class=K>PORT</span> (
      alien_x : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      alien_y : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_x   : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      gun_y   : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      rst_n   : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit     : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c4_t2_victory_effect
   <span class=K>PORT</span> (
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      color   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      victory : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      x_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> hit_counter
   <span class=K>PORT</span> (
      clk        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit_detect : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      sw0        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      speed      : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      victory    : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t7_basic_alien_top <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t7_basic_alien_top;
   <span class=K>FOR</span> <span class=K>ALL</span> : c3_t1_gun_module <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c3_t1_gun_module;
   <span class=K>FOR</span> <span class=K>ALL</span> : c3_t2_write_sequencer <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c3_t2_write_sequencer;
   <span class=K>FOR</span> <span class=K>ALL</span> : c3_t4_gun_bullet <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c3_t4_gun_bullet;
   <span class=K>FOR</span> <span class=K>ALL</span> : c4_t1_hit_detector <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c4_t1_hit_detector;
   <span class=K>FOR</span> <span class=K>ALL</span> : c4_t2_victory_effect <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c4_t2_victory_effect;
   <span class=K>FOR</span> <span class=K>ALL</span> : hit_counter <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.hit_counter;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'mux'</span>
   u_6combo_proc: <span class=K>PROCESS</span>(x_coord, x_coord1, bullet_x_coord, x_coord2,
                          module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => xw <= x_coord;
      <span class=K>WHEN</span> <span class=S>"01"</span> => xw <= x_coord1;
      <span class=K>WHEN</span> <span class=S>"10"</span> => xw <= bullet_x_coord;
      <span class=K>WHEN</span> <span class=S>"11"</span> => xw <= x_coord2;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => xw <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_6combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_7' of 'mux'</span>
   u_7combo_proc: <span class=K>PROCESS</span>(y_coord, y_coord1, bullet_y_coord, y_coord2,
                          module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => yw <= y_coord;
      <span class=K>WHEN</span> <span class=S>"01"</span> => yw <= y_coord1;
      <span class=K>WHEN</span> <span class=S>"10"</span> => yw <= bullet_y_coord;
      <span class=K>WHEN</span> <span class=S>"11"</span> => yw <= y_coord2;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => yw <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_7combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_8' of 'mux'</span>
   u_8combo_proc: <span class=K>PROCESS</span>(alien_col, gun_col, bullet_color, color1,
                          module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => color <= alien_col;
      <span class=K>WHEN</span> <span class=S>"01"</span> => color <= gun_col;
      <span class=K>WHEN</span> <span class=S>"10"</span> => color <= bullet_color;
      <span class=K>WHEN</span> <span class=S>"11"</span> => color <= color1;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => color <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_8combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_1 : c2_t7_basic_alien_top
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk         => clk,
         enable      => enable,
         enable_slow => enable_slow,
         hit         => btn(2),
         rst_n       => rst_n,
         speed       => speed,
         alien_col   => alien_col,
         x_coord     => x_coord,
         y_coord     => y_coord
      );
   U_2 : c3_t1_gun_module
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn        => btn,
         clk        => clk,
         enable     => enable,
         gun_px_idx => gun_px_indx,
         rst_n      => rst_n,
         gun_col    => gun_col,
         x_coord    => x_coord1,
         x_internal => x_internal,
         y_coord    => y_coord1
      );
   U_0 : c3_t2_write_sequencer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_defeat      => victory1,
         alien_defeat_done => victory,
         clk               => clk,
         rst               => rst_n,
         write_ready       => w_rdy,
         enable            => enable,
         enable_slow       => enable_slow,
         frame_done        => frame_written,
         gun_px_indx       => gun_px_indx,
         module_select     => module_select,
         write             => write_out
      );
   U_9 : c3_t4_gun_bullet
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn            => btn,
         clk            => clk,
         enable         => enable,
         gun_x_coord    => x_internal,
         rst_n          => rst_n,
         bullet_color   => bullet_color,
         bullet_x_coord => bullet_x_coord,
         bullet_y_coord => bullet_y_coord
      );
   U_5 : c4_t1_hit_detector
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_x => x_coord,
         alien_y => y_coord,
         clk     => clk,
         gun_x   => bullet_x_coord,
         gun_y   => bullet_y_coord,
         rst_n   => rst_n,
         hit     => hit
      );
   U_3 : c4_t2_victory_effect
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk     => clk,
         rst     => rst_n,
         color   => color1,
         victory => victory,
         x_coord => x_coord2,
         y_coord => y_coord2
      );
   U_4 : hit_counter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk        => clk,
         hit_detect => hit,
         rst        => rst_n,
         sw0        => sw0,
         speed      => speed,
         victory    => victory1
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
