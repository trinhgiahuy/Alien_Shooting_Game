<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 15:42:41 on 05/31/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c3_t4_gun_bullet.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - ACER.UNKNOWN (LAPTOP-PGKK1HS3)</span>
<span class=C>--          at - 00:04:16 05&#47;31&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c3_t4_gun_bullet <span class=K>IS</span>
   <span class=K>PORT</span>(
      btn            : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      gun_x_coord    : <span class=A>IN</span>     <span class=T>std_logic_vector</span> ( 7 <span class=K>DOWNTO</span> 0);
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span>;
      bullet_color   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      bullet_x_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      bullet_y_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c3_t4_gun_bullet ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c3_t4_gun_bullet.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - ACER.UNKNOWN (LAPTOP-PGKK1HS3)</span>
<span class=C>--          at - 00:04:15 05&#47;31&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c3_t4_gun_bullet <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> c_out    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout     : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout1    : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout2    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout3    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout4    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout5    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout6    : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> equality : <span class=T>std_logic</span>;

   <span class=C>-- Implicit buffer signal declarations</span>
   <span class=K>SIGNAL</span> bullet_x_coord_internal : <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> bullet_y_coord_internal : <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_5' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_5reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_6' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_6reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_7' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_7reg_cval : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c2_t4_right_shifter
   <span class=K>PORT</span> (
      c_in  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      c_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c4_t1_coordinate_compare
   <span class=K>PORT</span> (
      coord_1  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      coord_2  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      equality : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t4_right_shifter <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t4_right_shifter;
   <span class=K>FOR</span> <span class=K>ALL</span> : c4_t1_coordinate_compare <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c4_t1_coordinate_compare;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'adff'</span>
   bullet_x_coord_internal <= mw_U_5reg_cval;
   u_5seq_proc: <span class=K>PROCESS</span> (clk)<span class=K>BEGIN</span>
      <span class=K>IF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
            mw_U_5reg_cval <= <span class=S>"00000000"</span>;
         <span class=K>ELSE</span>
            mw_U_5reg_cval <= dout;
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_5seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'adff'</span>
   bullet_y_coord_internal <= mw_U_6reg_cval;
   u_6seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_6reg_cval <= <span class=S>"00000000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_6reg_cval <= dout4;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_6seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_7' of 'adff'</span>
   bullet_color <= mw_U_7reg_cval;
   u_7seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_7reg_cval <= <span class=S>"000000000000000000000000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_7reg_cval <= dout6;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_7seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'and'</span>
   dout1 <= btn(0) <span class=K>AND</span> equality;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'constval'</span>
   dout3 <= <span class=S>"01000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_11' of 'constval'</span>
   dout5 <= <span class=S>"00000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_12' of 'constval'</span>
   dout6 <= <span class=S>"000111000111000111000111"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'mux'</span>
   u_1combo_proc: <span class=K>PROCESS</span>(bullet_y_coord_internal, c_out, enable)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> enable <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout2 <= bullet_y_coord_internal;
      <span class=K>WHEN</span> '1' => dout2 <= c_out;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout2 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_1combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_2' of 'mux'</span>
   u_2combo_proc: <span class=K>PROCESS</span>(bullet_x_coord_internal, gun_x_coord, btn)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> btn(0) <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout <= bullet_x_coord_internal;
      <span class=K>WHEN</span> '1' => dout <= gun_x_coord;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_2combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_3' of 'mux'</span>
   u_3combo_proc: <span class=K>PROCESS</span>(dout2, dout3, dout1)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout1 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout4 <= dout2;
      <span class=K>WHEN</span> '1' => dout4 <= dout3;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout4 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_3combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_9 : c2_t4_right_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         c_in  => bullet_y_coord_internal,
         c_out => c_out
      );
   U_8 : c4_t1_coordinate_compare
      <span class=K>PORT</span> <span class=K>MAP</span> (
         coord_1  => dout5,
         coord_2  => bullet_y_coord_internal,
         equality => equality
      );

   <span class=C>-- Implicit buffered output assignments</span>
   bullet_x_coord <= bullet_x_coord_internal;
   bullet_y_coord <= bullet_y_coord_internal;

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
