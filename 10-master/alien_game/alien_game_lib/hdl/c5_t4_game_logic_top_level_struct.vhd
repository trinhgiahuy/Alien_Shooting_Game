-- VHDL Entity alien_game_lib.c5_t4_game_logic_top_level.symbol
--
-- Created:
--          by - ACER.UNKNOWN (LAPTOP-PGKK1HS3)
--          at - 01:22:45 05/31/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c5_t4_game_logic_top_level IS
   PORT( 
      btn           : IN     std_logic_vector (3 DOWNTO 0);
      clk           : IN     std_logic;
      rst_n         : IN     std_logic;
      sw0           : IN     std_logic;
      w_rdy         : IN     std_logic;
      color         : OUT    std_logic_vector (23 DOWNTO 0);
      frame_written : OUT    std_logic;
      write_out     : OUT    std_logic;
      xw            : OUT    std_logic_vector (7 DOWNTO 0);
      yw            : OUT    std_logic_vector (7 DOWNTO 0)
   );

-- Declarations

END c5_t4_game_logic_top_level ;

--
-- VHDL Architecture alien_game_lib.c5_t4_game_logic_top_level.struct
--
-- Created:
--          by - ACER.UNKNOWN (LAPTOP-PGKK1HS3)
--          at - 01:22:45 05/31/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF c5_t4_game_logic_top_level IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL alien_col      : std_logic_vector(23 DOWNTO 0);
   SIGNAL bullet_color   : std_logic_vector(23 DOWNTO 0);
   SIGNAL bullet_x_coord : std_logic_vector(7 DOWNTO 0);
   SIGNAL bullet_y_coord : std_logic_vector(7 DOWNTO 0);
   SIGNAL color1         : std_logic_vector(23 DOWNTO 0);
   SIGNAL enable         : std_logic;
   SIGNAL enable_slow    : std_logic;
   SIGNAL gun_col        : std_logic_vector(23 DOWNTO 0);
   SIGNAL gun_px_indx    : std_logic_vector(1 DOWNTO 0);
   SIGNAL hit            : std_logic;
   SIGNAL module_select  : std_logic_vector(1 DOWNTO 0);
   SIGNAL speed          : std_logic;
   SIGNAL victory        : std_logic;
   SIGNAL victory1       : std_logic;
   SIGNAL x_coord        : std_logic_vector(7 DOWNTO 0);
   SIGNAL x_coord1       : std_logic_vector(7 DOWNTO 0);
   SIGNAL x_coord2       : std_logic_vector(7 DOWNTO 0);
   SIGNAL x_internal     : std_logic_vector(7 DOWNTO 0);
   SIGNAL y_coord        : std_logic_vector(7 DOWNTO 0);
   SIGNAL y_coord1       : std_logic_vector(7 DOWNTO 0);
   SIGNAL y_coord2       : std_logic_vector(7 DOWNTO 0);


   -- Component Declarations
   COMPONENT c2_t7_basic_alien_top
   PORT (
      clk         : IN     std_logic ;
      enable      : IN     std_logic ;
      enable_slow : IN     std_logic ;
      hit         : IN     std_logic ;
      rst_n       : IN     std_logic ;
      speed       : IN     std_logic ;
      alien_col   : OUT    std_logic_vector (23 DOWNTO 0);
      x_coord     : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord     : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c3_t1_gun_module
   PORT (
      btn        : IN     std_logic_vector (3 DOWNTO 0);
      clk        : IN     std_logic ;
      enable     : IN     std_logic ;
      gun_px_idx : IN     std_logic_vector (1 DOWNTO 0);
      rst_n      : IN     std_logic ;
      gun_col    : OUT    std_logic_vector (23 DOWNTO 0);
      x_coord    : OUT    std_logic_vector (7 DOWNTO 0);
      x_internal : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord    : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c3_t2_write_sequencer
   PORT (
      alien_defeat      : IN     std_logic ;
      alien_defeat_done : IN     std_logic ;
      clk               : IN     std_logic ;
      rst               : IN     std_logic ;
      write_ready       : IN     std_logic ;
      enable            : OUT    std_logic ;
      enable_slow       : OUT    std_logic ;
      frame_done        : OUT    std_logic ;
      gun_px_indx       : OUT    std_logic_vector (1 DOWNTO 0);
      module_select     : OUT    std_logic_vector (1 DOWNTO 0);
      write             : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT c3_t4_gun_bullet
   PORT (
      btn            : IN     std_logic_vector (3 DOWNTO 0);
      clk            : IN     std_logic ;
      enable         : IN     std_logic ;
      gun_x_coord    : IN     std_logic_vector ( 7 DOWNTO 0);
      rst_n          : IN     std_logic ;
      bullet_color   : OUT    std_logic_vector (23 DOWNTO 0);
      bullet_x_coord : OUT    std_logic_vector (7 DOWNTO 0);
      bullet_y_coord : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c4_t1_hit_detector
   PORT (
      alien_x : IN     std_logic_vector (7 DOWNTO 0);
      alien_y : IN     std_logic_vector (7 DOWNTO 0);
      clk     : IN     std_logic ;
      gun_x   : IN     std_logic_vector (7 DOWNTO 0);
      gun_y   : IN     std_logic_vector (7 DOWNTO 0);
      rst_n   : IN     std_logic ;
      hit     : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT c4_t2_victory_effect
   PORT (
      clk     : IN     std_logic ;
      rst     : IN     std_logic ;
      color   : OUT    std_logic_vector (23 DOWNTO 0);
      victory : OUT    std_logic ;
      x_coord : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT hit_counter
   PORT (
      clk        : IN     std_logic ;
      hit_detect : IN     std_logic ;
      rst        : IN     std_logic ;
      sw0        : IN     std_logic ;
      speed      : OUT    std_logic ;
      victory    : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : c2_t7_basic_alien_top USE ENTITY alien_game_lib.c2_t7_basic_alien_top;
   FOR ALL : c3_t1_gun_module USE ENTITY alien_game_lib.c3_t1_gun_module;
   FOR ALL : c3_t2_write_sequencer USE ENTITY alien_game_lib.c3_t2_write_sequencer;
   FOR ALL : c3_t4_gun_bullet USE ENTITY alien_game_lib.c3_t4_gun_bullet;
   FOR ALL : c4_t1_hit_detector USE ENTITY alien_game_lib.c4_t1_hit_detector;
   FOR ALL : c4_t2_victory_effect USE ENTITY alien_game_lib.c4_t2_victory_effect;
   FOR ALL : hit_counter USE ENTITY alien_game_lib.hit_counter;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_6' of 'mux'
   u_6combo_proc: PROCESS(x_coord, x_coord1, bullet_x_coord, x_coord2, 
                          module_select)
   BEGIN
      CASE module_select IS
      WHEN "00" => xw <= x_coord;
      WHEN "01" => xw <= x_coord1;
      WHEN "10" => xw <= bullet_x_coord;
      WHEN "11" => xw <= x_coord2;
      WHEN OTHERS => xw <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_6combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_7' of 'mux'
   u_7combo_proc: PROCESS(y_coord, y_coord1, bullet_y_coord, y_coord2, 
                          module_select)
   BEGIN
      CASE module_select IS
      WHEN "00" => yw <= y_coord;
      WHEN "01" => yw <= y_coord1;
      WHEN "10" => yw <= bullet_y_coord;
      WHEN "11" => yw <= y_coord2;
      WHEN OTHERS => yw <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_7combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_8' of 'mux'
   u_8combo_proc: PROCESS(alien_col, gun_col, bullet_color, color1, 
                          module_select)
   BEGIN
      CASE module_select IS
      WHEN "00" => color <= alien_col;
      WHEN "01" => color <= gun_col;
      WHEN "10" => color <= bullet_color;
      WHEN "11" => color <= color1;
      WHEN OTHERS => color <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_8combo_proc;

   -- Instance port mappings.
   U_1 : c2_t7_basic_alien_top
      PORT MAP (
         clk         => clk,
         enable      => enable,
         enable_slow => enable_slow,
         hit         => btn(2),
         rst_n       => rst_n,
         speed       => speed,
         alien_col   => alien_col,
         x_coord     => x_coord,
         y_coord     => y_coord
      );
   U_2 : c3_t1_gun_module
      PORT MAP (
         btn        => btn,
         clk        => clk,
         enable     => enable,
         gun_px_idx => gun_px_indx,
         rst_n      => rst_n,
         gun_col    => gun_col,
         x_coord    => x_coord1,
         x_internal => x_internal,
         y_coord    => y_coord1
      );
   U_0 : c3_t2_write_sequencer
      PORT MAP (
         alien_defeat      => victory1,
         alien_defeat_done => victory,
         clk               => clk,
         rst               => rst_n,
         write_ready       => w_rdy,
         enable            => enable,
         enable_slow       => enable_slow,
         frame_done        => frame_written,
         gun_px_indx       => gun_px_indx,
         module_select     => module_select,
         write             => write_out
      );
   U_9 : c3_t4_gun_bullet
      PORT MAP (
         btn            => btn,
         clk            => clk,
         enable         => enable,
         gun_x_coord    => x_internal,
         rst_n          => rst_n,
         bullet_color   => bullet_color,
         bullet_x_coord => bullet_x_coord,
         bullet_y_coord => bullet_y_coord
      );
   U_5 : c4_t1_hit_detector
      PORT MAP (
         alien_x => x_coord,
         alien_y => y_coord,
         clk     => clk,
         gun_x   => bullet_x_coord,
         gun_y   => bullet_y_coord,
         rst_n   => rst_n,
         hit     => hit
      );
   U_3 : c4_t2_victory_effect
      PORT MAP (
         clk     => clk,
         rst     => rst_n,
         color   => color1,
         victory => victory,
         x_coord => x_coord2,
         y_coord => y_coord2
      );
   U_4 : hit_counter
      PORT MAP (
         clk        => clk,
         hit_detect => hit,
         rst        => rst_n,
         sw0        => sw0,
         speed      => speed,
         victory    => victory1
      );

END struct;
