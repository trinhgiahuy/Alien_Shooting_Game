-- VHDL Entity alien_game_lib.c5_t1_shield_gamma_set.symbol
--
-- Created:
--          by - Asus.UNKNOWN (LAPTOP-IT04P56L)
--          at - 22:44:22 05/30/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c5_t1_shield_gamma_set IS
   PORT( 
      clk      : IN     std_logic;
      rst      : IN     std_logic;
      rx_rdy   : IN     std_logic;
      bit_out  : OUT    std_logic;
      lat      : OUT    std_logic;
      sb       : OUT    std_logic;
      transmit : OUT    std_logic
   );

-- Declarations

END c5_t1_shield_gamma_set ;

--
-- VHDL Architecture alien_game_lib.c5_t1_shield_gamma_set.fsm
--
-- Created:
--          by - Asus.UNKNOWN (LAPTOP-IT04P56L)
--          at - 23:01:03 05/30/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c5_t1_shield_gamma_set IS

   -- Architecture Declarations
   SIGNAL bit_index : integer RANGE 6 DOWNTO 0 := 0;  
   SIGNAL blue : std_logic_vector(5 DOWNTO 0) := "110111";  
   SIGNAL color : std_logic_vector(5 DOWNTO 0);  
   SIGNAL color_select : integer RANGE 3 DOWNTO 0 := 0;  
   SIGNAL counter : integer RANGE 8 DOWNTO 0 := 0;  
   SIGNAL green : std_logic_vector(5 DOWNTO 0) := "111111";  
   SIGNAL red : std_logic_vector(5 DOWNTO 0) := "011100";  

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2,
      s3,
      s4,
      s5,
      s6,
      s7,
      s8,
      s9,
      s10,
      s11,
      s12
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(1 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(1 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_s12 : std_logic;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= s0;
         csm_timer <= (OTHERS => '0');
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;

         -- Combined Actions
         CASE current_state IS
            WHEN s1 => 
               color <= red;
            WHEN s2 => 
               color <= green;
            WHEN s3 => 
               color <= blue;
            WHEN s5 => 
               bit_index <= bit_index + 1;
            WHEN s9 => 
               bit_index <=0;
               color_select <= color_select+1;
            WHEN s10 => 
               counter <= counter + 1;
               color_select <= 0;
            WHEN OTHERS =>
               NULL;
         END CASE;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      bit_index,
      color_select,
      counter,
      current_state,
      rx_rdy
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_s12 <= '0';
      CASE current_state IS
         WHEN s0 => 
            IF (color_select = 2) THEN 
               next_state <= s1;
            ELSIF (color_select = 1) THEN 
               next_state <= s2;
            ELSIF (color_select = 0) THEN 
               next_state <= s3;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            next_state <= s4;
         WHEN s2 => 
            next_state <= s4;
         WHEN s3 => 
            next_state <= s4;
         WHEN s4 => 
            IF (rx_rdy = '1') THEN 
               next_state <= s5;
            ELSE
               next_state <= s4;
            END IF;
         WHEN s5 => 
            next_state <= s7;
         WHEN s6 => 
            IF (bit_index /= 6 AND counter /= 8) THEN 
               next_state <= s0;
            ELSIF (bit_index = 6 AND counter /= 8) THEN 
               next_state <= s9;
            ELSIF (counter=8) THEN 
               next_state <= s11;
            ELSE
               next_state <= s6;
            END IF;
         WHEN s7 => 
            next_state <= s6;
         WHEN s8 => 
            next_state <= s12;
            csm_to_s12 <= '1';
         WHEN s9 => 
            IF (color_select /= 2) THEN 
               next_state <= s0;
            ELSIF (color_select <= 2) THEN 
               next_state <= s10;
            ELSE
               next_state <= s9;
            END IF;
         WHEN s10 => 
            IF (counter /= 7) THEN 
               next_state <= s0;
            ELSIF (counter = 7) THEN 
               next_state <= s11;
            ELSE
               next_state <= s10;
            END IF;
         WHEN s11 => 
            next_state <= s8;
         WHEN s12 => 
            next_state <= s12;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      bit_index,
      color,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN s0 => 
            sb <= '0';
            transmit <= '0';
            lat <= '1';
         WHEN s4 => 
            bit_out <= color(bit_index);
         WHEN s6 => 
            transmit <= '0';
         WHEN s7 => 
            transmit <= '1';
         WHEN s8 => 
            sb <= '0';
            lat <= '1';
         WHEN s11 => 
            lat <= '0';
            bit_out <= '0';
         WHEN s12 => 
            sb <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_s12
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_s12 = '1') THEN
         csm_next_timer <= "01"; -- no cycles(2)-1=1
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END fsm;
