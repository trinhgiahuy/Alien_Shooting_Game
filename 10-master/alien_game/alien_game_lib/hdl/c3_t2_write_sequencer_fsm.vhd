-- VHDL Entity alien_game_lib.c3_t2_write_sequencer.symbol
--
-- Created:
--          by - ACER.UNKNOWN (LAPTOP-PGKK1HS3)
--          at - 18:17:50 05/29/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c3_t2_write_sequencer IS
   PORT( 
      alien_defeat      : IN     std_logic;
      alien_defeat_done : IN     std_logic;
      clk               : IN     std_logic;
      rst               : IN     std_logic;
      write_ready       : IN     std_logic;
      enable            : OUT    std_logic;
      enable_slow       : OUT    std_logic;
      frame_done        : OUT    std_logic;
      gun_px_indx       : OUT    std_logic_vector (1 DOWNTO 0);
      module_select     : OUT    std_logic_vector (1 DOWNTO 0);
      write             : OUT    std_logic
   );

-- Declarations

END c3_t2_write_sequencer ;

--
-- VHDL Architecture alien_game_lib.c3_t2_write_sequencer.fsm
--
-- Created:
--          by - ACER.UNKNOWN (LAPTOP-PGKK1HS3)
--          at - 18:17:50 05/29/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c3_t2_write_sequencer IS

   -- Architecture Declarations
   SIGNAL counter : integer RANGE 15 DOWNTO 0;  

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2,
      s3,
      s4,
      s5,
      s6,
      s7,
      s8,
      s9,
      s10,
      s11,
      s12,
      s13
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(23 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(23 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_s12 : std_logic;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= s0;
         csm_timer <= (OTHERS => '0');
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;

         -- Combined Actions
         CASE current_state IS
            WHEN s9 => 
               IF (counter /= 1) THEN 
                  counter <= 1;
               ELSIF (counter = 1) THEN 
                  counter <= 0 ;
               END IF;
            WHEN OTHERS =>
               NULL;
         END CASE;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      alien_defeat,
      alien_defeat_done,
      counter,
      csm_timeout,
      current_state,
      write_ready
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_s12 <= '0';
      CASE current_state IS
         WHEN s0 => 
            IF (write_ready = '1' AND alien_defeat /= '1') THEN 
               next_state <= s1;
            ELSIF (write_ready = '1' AND alien_defeat = '1') THEN 
               next_state <= s13;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            next_state <= s2;
         WHEN s2 => 
            next_state <= s3;
         WHEN s3 => 
            next_state <= s4;
         WHEN s4 => 
            next_state <= s5;
         WHEN s5 => 
            next_state <= s6;
         WHEN s6 => 
            next_state <= s7;
         WHEN s7 => 
            next_state <= s8;
         WHEN s8 => 
            next_state <= s9;
         WHEN s9 => 
            IF (counter /= 1) THEN 
               next_state <= s10;
            ELSIF (counter = 1) THEN 
               next_state <= s11;
            ELSE
               next_state <= s9;
            END IF;
         WHEN s10 => 
            next_state <= s12;
            csm_to_s12 <= '1';
         WHEN s11 => 
            next_state <= s12;
            csm_to_s12 <= '1';
         WHEN s12 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s0;
            ELSE
               next_state <= s12;
            END IF;
         WHEN s13 => 
            IF (alien_defeat_done = '1') THEN 
               next_state <= s9;
            ELSE
               next_state <= s13;
            END IF;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      enable <= '0';
      enable_slow <= '0';
      frame_done <= '0';
      gun_px_indx <= "00";
      module_select <= "00";
      write <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN s1 => 
            write <= '1';
         WHEN s2 => 
            write <= '1' ;
            module_select <= "01" ;
         WHEN s3 => 
            module_select <= "01";
            write <= '1';
         WHEN s4 => 
            module_select <= "01";
            write <= '1';
            gun_px_indx <= "01";
         WHEN s5 => 
            module_select <= "01";
            write <= '1';
            gun_px_indx <= "10";
         WHEN s6 => 
            module_select <= "01";
            write <= '1';
            gun_px_indx <= "11";
         WHEN s7 => 
            module_select <= "01";
            write <= '1';
            gun_px_indx <= "11";
         WHEN s8 => 
            module_select <= "10";
            write <= '1';
         WHEN s9 => 
            frame_done <= '1' ;
         WHEN s10 => 
            enable <= '1' ;
         WHEN s11 => 
            enable <= '1' ;
            enable_slow <= '1' ;
         WHEN s13 => 
            write <= '1' ;
            module_select <= "11" ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_s12
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_s12 = '1') THEN
         csm_next_timer <= "101101110001101011111111"; -- no cycles(12000000)-1=11999999
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END fsm;
