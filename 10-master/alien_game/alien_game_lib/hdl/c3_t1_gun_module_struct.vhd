-- VHDL Entity alien_game_lib.c3_t1_gun_module.symbol
--
-- Created:
--          by - ACER.UNKNOWN (LAPTOP-PGKK1HS3)
--          at - 01:18:20 05/31/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c3_t1_gun_module IS
   PORT( 
      btn        : IN     std_logic_vector (3 DOWNTO 0);
      clk        : IN     std_logic;
      enable     : IN     std_logic;
      gun_px_idx : IN     std_logic_vector (1 DOWNTO 0);
      rst_n      : IN     std_logic;
      gun_col    : OUT    std_logic_vector (23 DOWNTO 0);
      x_coord    : OUT    std_logic_vector (7 DOWNTO 0);
      x_internal : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord    : OUT    std_logic_vector (7 DOWNTO 0)
   );

-- Declarations

END c3_t1_gun_module ;

--
-- VHDL Architecture alien_game_lib.c3_t1_gun_module.struct
--
-- Created:
--          by - ACER.UNKNOWN (LAPTOP-PGKK1HS3)
--          at - 01:18:20 05/31/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF c3_t1_gun_module IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL c_out    : std_logic_vector(7 DOWNTO 0);
   SIGNAL c_out1   : std_logic_vector(7 DOWNTO 0);
   SIGNAL c_out2   : std_logic_vector(7 DOWNTO 0);
   SIGNAL c_out3   : std_logic_vector(7 DOWNTO 0);
   SIGNAL data_out : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout     : std_logic_vector(23 DOWNTO 0);
   SIGNAL dout0    : std_logic;
   SIGNAL dout1    : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout10   : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout12   : std_logic;
   SIGNAL dout13   : std_logic;
   SIGNAL dout14   : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout2    : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout3    : std_logic;
   SIGNAL dout4    : std_logic;
   SIGNAL dout5    : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout6    : std_logic;
   SIGNAL dout7    : std_logic;
   SIGNAL dout8    : std_logic;
   SIGNAL dout9    : std_logic_vector(7 DOWNTO 0);

   -- Implicit buffer signal declarations
   SIGNAL x_internal_internal : std_logic_vector (7 DOWNTO 0);


   -- ModuleWare signal declarations(v1.12) for instance 'U_0' of 'adff'
   SIGNAL mw_U_0reg_cval : std_logic_vector(23 DOWNTO 0) := "000000000000000000000000";

   -- ModuleWare signal declarations(v1.12) for instance 'U_2' of 'adff'
   SIGNAL mw_U_2reg_cval : std_logic_vector(7 DOWNTO 0) := "00000000";

   -- ModuleWare signal declarations(v1.12) for instance 'U_22' of 'adff'
   SIGNAL mw_U_22reg_cval : std_logic_vector(7 DOWNTO 0) := "00000000";

   -- ModuleWare signal declarations(v1.12) for instance 'U_23' of 'adff'
   SIGNAL mw_U_23reg_cval : std_logic_vector(7 DOWNTO 0) := "00000000";

   -- ModuleWare signal declarations(v1.12) for instance 'U_21' of 'split'
   SIGNAL mw_U_21temp_din : std_logic_vector(1 DOWNTO 0);

   -- Component Declarations
   COMPONENT c2_t3_left_shifter
   PORT (
      data_in  : IN     std_logic_vector (7 DOWNTO 0);
      data_out : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c2_t4_right_shifter
   PORT (
      c_in  : IN     std_logic_vector (7 DOWNTO 0);
      c_out : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : c2_t3_left_shifter USE ENTITY alien_game_lib.c2_t3_left_shifter;
   FOR ALL : c2_t4_right_shifter USE ENTITY alien_game_lib.c2_t4_right_shifter;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_0' of 'adff'
   gun_col <= mw_U_0reg_cval;
   u_0seq_proc: PROCESS (clk)BEGIN
      IF (clk'EVENT AND clk='1') THEN
         IF (rst_n = '0') THEN
            mw_U_0reg_cval <= "110111110001011010000000";
         ELSE
            mw_U_0reg_cval <= dout;
         END IF;
      END IF;
   END PROCESS u_0seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_2' of 'adff'
   y_coord <= mw_U_2reg_cval;
   u_2seq_proc: PROCESS (clk)BEGIN
      IF (clk'EVENT AND clk='1') THEN
         IF (rst_n = '0') THEN
            mw_U_2reg_cval <= "10000000";
         ELSE
            mw_U_2reg_cval <= dout9;
         END IF;
      END IF;
   END PROCESS u_2seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_22' of 'adff'
   x_internal_internal <= mw_U_22reg_cval;
   u_22seq_proc: PROCESS (clk)BEGIN
      IF (clk'EVENT AND clk='1') THEN
         IF (rst_n = '0') THEN
            mw_U_22reg_cval <= "00010000";
         ELSE
            mw_U_22reg_cval <= dout14;
         END IF;
      END IF;
   END PROCESS u_22seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_23' of 'adff'
   x_coord <= mw_U_23reg_cval;
   u_23seq_proc: PROCESS (clk)BEGIN
      IF (clk'EVENT AND clk='1') THEN
         IF (rst_n = '0') THEN
            mw_U_23reg_cval <= "00010000";
         ELSE
            mw_U_23reg_cval <= dout2;
         END IF;
      END IF;
   END PROCESS u_23seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_5' of 'and'
   dout7 <= dout6 AND enable;

   -- ModuleWare code(v1.12) for instance 'U_8' of 'and'
   dout3 <= dout4 AND btn(3);

   -- ModuleWare code(v1.12) for instance 'U_15' of 'and'
   dout8 <= dout0 AND dout13;

   -- ModuleWare code(v1.12) for instance 'U_1' of 'constval'
   dout <= "110111110001011010000000";

   -- ModuleWare code(v1.12) for instance 'U_3' of 'constval'
   dout1 <= "10000000";

   -- ModuleWare code(v1.12) for instance 'U_7' of 'inv'
   dout4 <= NOT(btn(1));

   -- ModuleWare code(v1.12) for instance 'U_4' of 'mux'
   u_4combo_proc: PROCESS(dout10, c_out3, dout12)
   BEGIN
      CASE dout12 IS
      WHEN '0' => dout2 <= dout10;
      WHEN '1' => dout2 <= c_out3;
      WHEN OTHERS => dout2 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_4combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_6' of 'mux'
   u_6combo_proc: PROCESS(data_out, c_out, dout3)
   BEGIN
      CASE dout3 IS
      WHEN '0' => dout5 <= data_out;
      WHEN '1' => dout5 <= c_out;
      WHEN OTHERS => dout5 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_6combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_12' of 'mux'
   u_12combo_proc: PROCESS(x_internal_internal, dout5, dout7)
   BEGIN
      CASE dout7 IS
      WHEN '0' => dout14 <= x_internal_internal;
      WHEN '1' => dout14 <= dout5;
      WHEN OTHERS => dout14 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_12combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_14' of 'mux'
   u_14combo_proc: PROCESS(dout1, c_out1, dout8)
   BEGIN
      CASE dout8 IS
      WHEN '0' => dout9 <= dout1;
      WHEN '1' => dout9 <= c_out1;
      WHEN OTHERS => dout9 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_14combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_16' of 'mux'
   u_16combo_proc: PROCESS(x_internal_internal, c_out2, dout13)
   BEGIN
      CASE dout13 IS
      WHEN '0' => dout10 <= x_internal_internal;
      WHEN '1' => dout10 <= c_out2;
      WHEN OTHERS => dout10 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_16combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_11' of 'or'
   dout6 <= btn(1) OR btn(3);

   -- ModuleWare code(v1.12) for instance 'U_20' of 'or'
   dout12 <= dout13 OR dout0;

   -- ModuleWare code(v1.12) for instance 'U_21' of 'split'
   mw_U_21temp_din <= gun_px_idx;
   u_21combo_proc: PROCESS (mw_U_21temp_din)
   VARIABLE temp_din: std_logic_vector(1 DOWNTO 0);
   BEGIN
      temp_din := mw_U_21temp_din(1 DOWNTO 0);
      dout0 <= temp_din(0);
      dout13 <= temp_din(1);
   END PROCESS u_21combo_proc;

   -- Instance port mappings.
   U_10 : c2_t3_left_shifter
      PORT MAP (
         data_in  => x_internal_internal,
         data_out => data_out
      );
   U_9 : c2_t4_right_shifter
      PORT MAP (
         c_in  => x_internal_internal,
         c_out => c_out
      );
   U_13 : c2_t4_right_shifter
      PORT MAP (
         c_in  => dout1,
         c_out => c_out1
      );
   U_18 : c2_t4_right_shifter
      PORT MAP (
         c_in  => x_internal_internal,
         c_out => c_out2
      );
   U_19 : c2_t4_right_shifter
      PORT MAP (
         c_in  => dout10,
         c_out => c_out3
      );

   -- Implicit buffered output assignments
   x_internal <= x_internal_internal;

END struct;
